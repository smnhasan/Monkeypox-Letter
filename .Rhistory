pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
prob <- predict(model,newdata=testdata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat ~ Gene_Cat + Position
+ AA1_cat + AA2_cat + Mutation.Score, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.1, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.1, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(testdata$Type_cat))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
prob <- predict(model,newdata=testdata, type="response")
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.1, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.2, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
pred1 <- ifelse(pred>0.45, 1, 0)   ## if greatr than median value then 1 otherwise 0
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.45, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.48, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.45, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.44, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
model <- svm(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s, data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0.44, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
prob <- predict(model,newdata=testdata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(testdata$Type_cat))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
prob <- predict(model, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
prob <- predict(model, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
#ANN
library(neuralnet)
model <- neuralnet(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s,data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(testdata$Type_cat))
pr <- prediction(as.numeric(pred1),as.numeric(testdata$Type_cat))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc");
auc <- as.numeric(auc.tmp@y.values)
auc
prob <- predict(model,type="response")
#ANN
library(neuralnet)
model <- neuralnet(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s,data=traindata)
prob <- predict(model,type="response")
prob <- predict.lm(model,type="response")
prob <- predict(model,type="response")
#ANN
library(neuralnet)
model <- neuralnet(Type_cat_s ~ Gene_Cat_s + Position_s
+ AA1_cat_s + AA2_cat_s + Mutation.Score_s,data=traindata)
summary(model)
pred = predict(model, newdata=testdata, type = "response")
pred1 <- ifelse(pred>0, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- factor(pred1,levels=c(0,1))
confusionMatrix(pred1,factor(testdata$Type_cat))   ## Original Yes=106 No=1926
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(testdata$Type_cat))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc");
auc <- as.numeric(auc.tmp@y.values)
auc
prob <- predict(model,type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
prob <- predict(model,type="response")
prob <- predict(model,type="response")
prob <- predict(model,newdata=testdata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
prob
pred <- prediction(as.numeric(prob),as.numeric(testdata$Type_cat_s))
prob <- predict(model,newdata=testdata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(testdata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
pred <- prediction(as.numeric(prob),as.numeric(testdata$Type_cat))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
prob <- predict(model,newdata=testdata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(testdata$Type_cat))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
prob <- predict(model,newdata=traindata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(testdata$Type_cat))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
prob <- predict(model,newdata=traindata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(testdata$Type_cat))
prob <- predict(model,newdata=traindata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
prob <- predict(model,newdata=traindata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
library(e1071)
prob <- predict(model,newdata=traindata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
prob
prob <- predict(model,newdata=traindata, type="response")
pred <- prediction(as.numeric(prob),as.numeric(traindata$Type_cat_s))
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pred,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
plot(perf, main="ROC Curve ", xlab="specificity",  ylab="sensitivity")
grid()
abline(0,1, col="blue", lty=2)
#loding main data
wt <- read.table("E:\\Study\\ResearchProject\\Khalid Sir\\Water Quality\\Files\\DataNanalysis\\meqq.csv",sep=',',header=T)
str(wt)
#descriptive statistics
stat.desc(wt)
library(extrafont)
library(ggplot2)
library(pastecs)
library(corrplot)
library(ppcor)
library(factoextra)
library(psych)
library(GPArotation)
library(Hmisc)
library(dplyr)
library(ape)
library(plotly)
#loding main data
wt <- read.table("F:\\ResearchProject\\Water Quality\\DataNanalysis\\mgpl.csv",sep=',',header=T)
str(wt)
#descriptive statistics
stat.desc(wt)
#loding main data
wt <- read.table("E:\\Study\\ResearchProject\\Khalid Sir\\Water Quality\\Files\\DataNanalysis\\meqq.csv",sep=',',header=T)
str(wt)
#descriptive statistics
stat.desc(wt)
#main data for boxplot
box <- read.table("F:\\ResearchProject\\Water Quality\\DataNanalysis\\boxplot.csv",sep=',',header=T)
str(box)
#descriptive statistics
stat.desc(wt)
options(scipen=999)
#descriptive statistics
stat.desc(wt)
###################Water Quality in Sylhet City Corporation Area####################
#                            Mohammad Nayeem Hasan                                 #
####################################################################################
library(extrafont)
library(ggplot2)
library(pastecs)
library(corrplot)
library(ppcor)
library(factoextra)
library(psych)
library(GPArotation)
library(Hmisc)
library(dplyr)
library(ape)
library(plotly)
#loding main data
wt <- read.table("F:\\ResearchProject\\Water Quality\\DataNanalysis\\mgpl.csv",sep=',',header=T)
str(wt)
#descriptive statistics
stat.desc(wt)
#loding main data
wt <- read.table("E:\\Study\\ResearchProject\\Khalid Sir\\Water Quality\\Files\\DataNanalysis\\meqq.csv",sep=',',header=T)
str(wt)
options(scipen=999)
#descriptive statistics
stat.desc(wt)
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") + scale_color_brewer(palette = "PuOr")
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") + scale_color_brewer(palette = "PuOr")
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa")
library(MASS)
require(foreign)
require(ggplot2)
require(maptools)
library(tidyverse)
library(betareg)
library(car)
library(gapminder)
library(dplyr)
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
library(psych) # for descriptive analysis
library(forecast)
library(lmtest)
library(tseries)
##Descriptive
##WORLD SUMMARY
#2022 CFR
setwd('E:\\MP')
Mpox <- read.csv("Mpox.csv")
Mpox <- subset(Mpox, Mpox$date == "12/1/2022")
#Remove World and International information
Mpox_eu <-Mpox[(Mpox$continent == "Europe"),]
plt1 <- ggplot(Mpox_eu) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Europe")
plt1
#Remove World and International information
Mpox_ao <-Mpox[(Mpox$continent == "Asia"| Mpox$continent == "Oceania"),]
plt2 <- ggplot(Mpox_ao) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Asia and Oceania")
plt2
#Remove World and International information
Mpox_nsa <-Mpox[(Mpox$continent == "North America"| Mpox$continent == "South America"),]
plt3 <- ggplot(Mpox_nsa) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("North and South America")
plt3
#Remove World and International information
Mpox_a <-Mpox[(Mpox$continent == "Africa"),]
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa")
plt4
tiff("cont1.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt1)
dev.off()
tiff("cont2.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt2)
dev.off()
tiff("cont3.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt3)
dev.off()
tiff("cont4.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt4)
dev.off()
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") + scale_color_brewer(palette = "PuOr")
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") + scale_color_brewer(palette = "PuOr")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") + scale_color_brewer(palette = "PuOr")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") +
geom_bar(stat="identity", fill="steelblue")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6,stat="identity", fill="steelblue") +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") +
geom_bar()
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6,stat="identity", fill="steelblue") +
xlab("Total number of Monkeypox cases per million") + ylab("Africa")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="steelblue") +
xlab("Total number of Monkeypox cases per million") + ylab("Africa")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") + +scale_fill_brewer(palette="Blues")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") +scale_fill_brewer(palette="Blues")
plt4
) +
) +
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6) +
xlab("Total number of Monkeypox cases per million") + ylab("Africa") +scale_fill_brewer(palette="Blues")
plt4
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="steelblue") +
xlab("Total number of Monkeypox cases per million") + ylab("Africa")
plt4
plt3 <- ggplot(Mpox_nsa) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="coral4") +
xlab("Total number of Monkeypox cases per million") + ylab("North and South America")
plt3
plt2 <- ggplot(Mpox_ao) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="maroon1") +
xlab("Total number of Monkeypox cases per million") + ylab("Asia and Oceania")
plt2
plt1 <- ggplot(Mpox_eu) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="seashell") +
xlab("Total number of Monkeypox cases per million") + ylab("Europe")
plt1
plt1 <- ggplot(Mpox_eu) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="seagreen4") +
xlab("Total number of Monkeypox cases per million") + ylab("Europe")
plt1
library(MASS)
require(foreign)
require(ggplot2)
require(maptools)
library(tidyverse)
library(betareg)
library(car)
library(gapminder)
library(dplyr)
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
library(psych) # for descriptive analysis
library(forecast)
library(lmtest)
library(tseries)
##Descriptive
##WORLD SUMMARY
#2022 CFR
setwd('E:\\MP')
Mpox <- read.csv("Mpox.csv")
Mpox <- subset(Mpox, Mpox$date == "12/1/2022")
#Remove World and International information
Mpox_eu <-Mpox[(Mpox$continent == "Europe"),]
plt1 <- ggplot(Mpox_eu) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="seagreen4") +
xlab("Total number of Monkeypox cases per million") + ylab("Europe")
plt1
#Remove World and International information
Mpox_ao <-Mpox[(Mpox$continent == "Asia"| Mpox$continent == "Oceania"),]
plt2 <- ggplot(Mpox_ao) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="maroon1") +
xlab("Total number of Monkeypox cases per million") + ylab("Asia and Oceania")
plt2
#Remove World and International information
Mpox_nsa <-Mpox[(Mpox$continent == "North America"| Mpox$continent == "South America"),]
plt3 <- ggplot(Mpox_nsa) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="coral4") +
xlab("Total number of Monkeypox cases per million") + ylab("North and South America")
plt3
#Remove World and International information
Mpox_a <-Mpox[(Mpox$continent == "Africa"),]
plt4 <- ggplot(Mpox_a) +
geom_col(aes(total_cases_per_million, reorder(location, total_cases_per_million)),width = 0.6, fill="steelblue") +
xlab("Total number of Monkeypox cases per million") + ylab("Africa")
plt4
tiff("cont1.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt1)
dev.off()
tiff("cont2.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt2)
dev.off()
tiff("cont3.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt3)
dev.off()
tiff("cont4.tiff", units="in", width=12, height=12, res=300)
gridExtra::grid.arrange(plt4)
dev.off()
